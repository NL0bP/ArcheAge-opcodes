CARequestAuthPacket

int __thiscall CARequestAuthPacket_Structure(char *this, int *a2)
{
  char *v2; // esi
  int v3; // eax
  char v4; // al
  int v5; // edx
  void (__stdcall *v6)(const char *, char *, signed int); // eax
  char v7; // al
  int v8; // edx
  void (__cdecl *v9)(const char *, char *, signed int); // eax
  int v11; // [esp+0h] [ebp-Ch]
  int v12; // [esp+4h] [ebp-8h]
  int v13; // [esp+8h] [ebp-4h]

  v2 = this;
  (*(*a2 + 60))("p_from", this + 8, 0);
  (*(*a2 + 60))(a2, "p_to", v2 + 12, 0);
  (*(*a2 + 68))("svc", v2 + 16, 0);
  (*(*a2 + 120))("dev", v2 + 17, 0);
  if ( (*(*a2 + 28))() )
  {
    v2[(*(*a2 + 220))("account", v2 + 18, 74) + 18] = 0;
  }
  else
  {
    v3 = XlStringSize(v2 + 18);
    (*(*a2 + 224))("account", v2 + 18, v3);
  }
  v4 = (*(*a2 + 28))(v11, v12, v13);
  v5 = *a2;
  if ( v4 )
    v6 = *(v5 + 220);
  else
    v6 = *(v5 + 224);
  v6("mac", v2 + 93, 8);
  v7 = (*(*a2 + 28))();
  v8 = *a2;
  if ( v7 )
    v9 = *(v8 + 220);
  else
    v9 = *(v8 + 224);
  v9("mac2", v2 + 101, 8);
  return (*(*a2 + 56))("cpu", v2 + 112, 0);
}
----------------------------------------------------------------------
CARequestAuthNewPacket

int __thiscall CARequestAuth_New_1_Structure(char *this, int *a2)
{
  char *v2; // esi
  int v3; // eax
  char v4; // al
  int v5; // edx
  void (__stdcall *v6)(const char *, char *, signed int); // eax
  char v7; // al
  int v8; // edx
  void (__cdecl *v9)(const char *, char *, signed int); // eax
  int v11; // [esp+0h] [ebp-Ch]
  int v12; // [esp+4h] [ebp-8h]
  int v13; // [esp+8h] [ebp-4h]

  v2 = this;
  (*(*a2 + 60))("p_from", this + 8, 0);
  (*(*a2 + 60))(a2, "p_to", v2 + 12, 0);
  (*(*a2 + 68))("svc", v2 + 16, 0);
  (*(*a2 + 120))("dev", v2 + 17, 0);
  if ( (*(*a2 + 28))() )
  {
    v2[(*(*a2 + 220))("auth", v2 + 18, 2047) + 18] = 0;
  }
  else
  {
    v3 = XlStringSize(v2 + 18);
    (*(*a2 + 224))("auth", v2 + 18, v3);
  }
  v4 = (*(*a2 + 28))(v11, v12, v13);
  v5 = *a2;
  if ( v4 )
    v6 = *(v5 + 220);
  else
    v6 = *(v5 + 224);
  v6("mac", v2 + 2066, 8);
  v7 = (*(*a2 + 28))();
  v8 = *a2;
  if ( v7 )
    v9 = *(v8 + 220);
  else
    v9 = *(v8 + 224);
  v9("mac2", v2 + 2074, 8);
  return (*(*a2 + 56))("cpu", v2 + 2088, 0);
}
----------------------------------------------------------------------
CARequestAuthTencentPacket

int __thiscall CARequestAuthTencentPacket_Structure(char *this, int *a2)
{
  char *v2; // esi
  char v3; // al
  int v4; // edx
  void (__stdcall *v5)(const char *, char *, signed int); // eax
  char v6; // al
  int v7; // edx
  void (__stdcall *v8)(const char *, char *, signed int); // eax
  char v9; // al
  int v10; // edx
  void (__stdcall *v11)(const char *, char *, signed int); // eax
  bool v12; // zf
  int v13; // eax
  int result; // eax
  int v15; // [esp+0h] [ebp-Ch]
  int v16; // [esp+4h] [ebp-8h]
  int v17; // [esp+4h] [ebp-8h]
  int v18; // [esp+8h] [ebp-4h]

  v2 = this;
  (*(*a2 + 60))("p_from", this + 8, 0, v15, v16, v18);
  (*(*a2 + 60))(a2, "p_to", v2 + 12, 0);
  (*(*a2 + 120))("dev", v2 + 16, 0);
  (*(*a2 + 56))("qqno", v2 + 32, 0);
  (*(*a2 + 64))("len", v2 + 40, 0);
  v3 = (*(*a2 + 28))();
  v4 = *a2;
  if ( v3 )
    v5 = *(v4 + 220);
  else
    v5 = *(v4 + 224);
  v5("sig", v2 + 42, 128);
  v6 = (*(*a2 + 28))();
  v7 = *a2;
  if ( v6 )
    v8 = *(v7 + 220);
  else
    v8 = *(v7 + 224);
  v8("key", v2 + 170, 16);
  v9 = (*(*a2 + 28))();
  v10 = *a2;
  if ( v9 )
    v11 = *(v10 + 220);
  else
    v11 = *(v10 + 224);
  v11("mac", v2 + 17, 8);
  (*(*a2 + 68))("worldId", v2 + 186, 0);
  v17 = (v2 + 187);
  v12 = (*(*a2 + 28))() == 0;
  v13 = *a2;
  if ( v12 )
    result = (*(v13 + 224))("netbarSig", v17, 128);
  else
    result = (*(v13 + 220))("netbarSig", v17, 128);
  return result;
}
----------------------------------------------------------------------
CARequestAuthGameOnPacket

int __thiscall CARequestAuthGameOnPacket_Structure(char *this, int *a2)
{
  char *v2; // esi
  char v3; // al
  int v4; // edx
  void (__cdecl *v5)(const char *, char *, signed int); // eax
  int v6; // eax
  const char *v7; // esi
  int v8; // eax
  int result; // eax
  int v10; // [esp+0h] [ebp-Ch]
  int v11; // [esp+4h] [ebp-8h]
  int v12; // [esp+8h] [ebp-4h]

  v2 = this;
  (*(*a2 + 60))("p_from", this + 8, 0, v10, v11, v12);
  (*(*a2 + 60))(a2, "p_to", v2 + 12, 0);
  (*(*a2 + 120))("dev", v2 + 16, 0);
  v3 = (*(*a2 + 28))();
  v4 = *a2;
  if ( v3 )
    v5 = *(v4 + 220);
  else
    v5 = *(v4 + 224);
  v5("mac", v2 + 17, 8);
  if ( (*(*a2 + 28))() )
  {
    v2[(*(*a2 + 220))("param", v2 + 25, 1023) + 25] = 0;
  }
  else
  {
    v6 = XlStringSize(v2 + 25);
    (*(*a2 + 224))("param", v2 + 25, v6);
  }
  v7 = v2 + 1049;
  if ( (*(*a2 + 28))() )
  {
    result = (*(*a2 + 220))("si", v7, 15);
    v7[result] = 0;
  }
  else
  {
    v8 = XlStringSize(v7);
    result = (*(*a2 + 224))("si", v7, v8);
  }
  return result;
}
----------------------------------------------------------------------
CARequestAuthNew2Packet

int __thiscall CARequestAuth_New_2_Structure(char *this, int *a2)
{
  char *v2; // esi
  char v3; // al
  int v4; // edx
  void (__cdecl *v5)(const char *, char *, signed int); // eax
  int v6; // eax
  int v7; // eax
  int v9; // [esp+0h] [ebp-Ch]
  int v10; // [esp+4h] [ebp-8h]
  int v11; // [esp+8h] [ebp-4h]

  v2 = this;
  (*(*a2 + 60))("p_from", this + 8, 0, v9, v10, v11);
  (*(*a2 + 60))(a2, "p_to", v2 + 12, 0);
  (*(*a2 + 120))("dev", v2 + 16, 0);
  v3 = (*(*a2 + 28))();
  v4 = *a2;
  if ( v3 )
    v5 = *(v4 + 220);
  else
    v5 = *(v4 + 224);
  v5("mac", v2 + 17, 8);
  if ( (*(*a2 + 28))() )
  {
    v2[(*(*a2 + 220))("ticket", v2 + 25, 2048) + 25] = 0;
  }
  else
  {
    v6 = XlStringSize(v2 + 25);
    (*(*a2 + 224))("ticket", v2 + 25, v6);
  }
  if ( (*(*a2 + 28))() )
  {
    v2[(*(*a2 + 220))("signature", v2 + 2074, 127) + 2074] = 0;
  }
  else
  {
    v7 = XlStringSize(v2 + 2074);
    (*(*a2 + 224))("signature", v2 + 2074, v7);
  }
  return (*(*a2 + 120))("isLast", v2 + 2202, 0);
}
----------------------------------------------------------------------
CARequestAuthMailRuPacket

int __thiscall CARequestAuthMailRuPacket_Structure(char *this, int *a2)
{
  char *v2; // esi
  char v3; // al
  int v4; // edx
  void (__cdecl *v5)(const char *, char *, signed int); // eax
  int v6; // eax
  char v7; // al
  int v8; // edx
  int result; // eax
  int v10; // [esp+0h] [ebp-Ch]
  int v11; // [esp+0h] [ebp-Ch]
  int v12; // [esp+4h] [ebp-8h]
  int v13; // [esp+4h] [ebp-8h]
  int v14; // [esp+4h] [ebp-8h]
  int v15; // [esp+8h] [ebp-4h]
  int v16; // [esp+8h] [ebp-4h]

  v2 = this;
  (*(*a2 + 60))("p_from", this + 8, 0, v10, v12, v15);
  (*(*a2 + 60))(a2, "p_to", v2 + 12, 0);
  (*(*a2 + 120))("dev", v2 + 16, 0);
  v3 = (*(*a2 + 28))();
  v4 = *a2;
  if ( v3 )
    v5 = *(v4 + 220);
  else
    v5 = *(v4 + 224);
  v5("mac", v2 + 17, 8);
  if ( (*(*a2 + 28))() )
  {
    v2[(*(*a2 + 220))("id", v2 + 25, 31) + 25] = 0;
  }
  else
  {
    v6 = XlStringSize(v2 + 25);
    (*(*a2 + 224))("id", v2 + 25, v6);
  }
  v7 = (*(*a2 + 28))(v11, v13, v16);
  v8 = *a2;
  v14 = (v2 + 57);
  if ( v7 )
    result = (*(v8 + 220))("tkn", v14, 32);
  else
    result = (*(v8 + 224))("tkn", v14, 32);
  return result;
}
----------------------------------------------------------------------
CAChallengeResponsePacket

int __thiscall CAChallengeResponsePacket_Structure(char *this, int *a2)
{
  char *v2; // ebx
  char *v3; // esi
  signed int v4; // edi
  char v5; // al
  bool v6; // zf
  int v7; // eax
  int result; // eax
  int v9; // [esp+0h] [ebp-Ch]
  int v10; // [esp+4h] [ebp-8h]
  int v11; // [esp+4h] [ebp-8h]
  int v12; // [esp+8h] [ebp-4h]

  v2 = this;
  v3 = this + 8;
  v4 = 4;
  do
  {
    (*(*a2 + 60))(&aCh, v3, 0);
    v3 += 4;
    --v4;
  }
  while ( v4 );
  v5 = (*(*a2 + 28))(v9, v10, v12);
  v11 = (v2 + 24);
  v6 = v5 == 0;
  v7 = *a2;
  if ( v6 )
    result = (*(v7 + 224))(&aPw, v11, 32);
  else
    result = (*(v7 + 220))(&aPw, v11, 32);
  return result;
}
----------------------------------------------------------------------
CAChallengeResponse2Packet

int __thiscall CAChallengeResponse2Packet_Structure(char *this, int a2)
{
  int v2; // esi
  signed int v3; // edi
  int result; // eax

  v2 = (this + 8);
  v3 = 8;
  do
  {
    result = (*(*a2 + 60))(&aCh, v2, 0);
    v2 += 4;
    --v3;
  }
  while ( v3 );
  return result;
}
----------------------------------------------------------------------
ClientToAuthPacket = ClientToAuth2Packet

int __thiscall ClientToAuthPacket_Structure(_DWORD *this, int a2)
{
  _DWORD *v2; // esi
  int result; // eax
  int v4; // [esp+0h] [ebp-8h]
  int v5; // [esp+4h] [ebp-4h]

  v2 = this;
  if ( (*(*a2 + 28))(v4) )
  {
    result = (*(*a2 + 64))("type", &v5);
    v2[1] = v5;
  }
  else
  {
    v5 = *(v2 + 2);
    result = (*(*a2 + 64))("type", &v5);
  }
  return result;
}
----------------------------------------------------------------------
CAListWorldPacket

int __thiscall CAListWorldPacket_Structure(void *this, int a2)
{
  return (*(*a2 + 56))("flag", this + 8, 0);
}
----------------------------------------------------------------------
CAEnterWorldPacket

int __thiscall ClientToAuthPacket_Structure(_DWORD *this, int a2)
{
  _DWORD *v2; // esi
  int result; // eax
  int v4; // [esp+0h] [ebp-8h]
  int v5; // [esp+4h] [ebp-4h]

  v2 = this;
  if ( (*(*a2 + 28))(v4) )
  {
    result = (*(*a2 + 64))("type", &v5);
    v2[1] = v5;
  }
  else
  {
    v5 = *(v2 + 2);
    result = (*(*a2 + 64))("type", &v5);
  }
  return result;
}
----------------------------------------------------------------------
CACancelEnterWorldPacket

int __thiscall CACancelEnterWorldPacket_Structure(void *this, int a2)
{
  return (*(*a2 + 68))("wid", this + 8, 0);
}
----------------------------------------------------------------------
CARequestReconnectPacket

int __thiscall CARequestReconnectPacket_Structure(char *this, int *a2)
{
  char *v2; // esi
  char v3; // al
  int v4; // edx
  int result; // eax
  int v6; // [esp+0h] [ebp-Ch]
  int v7; // [esp+4h] [ebp-8h]
  int v8; // [esp+4h] [ebp-8h]
  int v9; // [esp+8h] [ebp-4h]

  v2 = this;
  (*(*a2 + 60))("p_from", this + 8, 0, v6, v7, v9);
  (*(*a2 + 60))(a2, "p_to", v2 + 12, 0);
  (*(*a2 + 56))("accountId", v2 + 16, 0);
  (*(*a2 + 68))("wid", v2 + 24, 0);
  (*(*a2 + 76))("cookie", v2 + 28, 0);
  v3 = (*(*a2 + 28))();
  v4 = *a2;
  v8 = (v2 + 32);
  if ( v3 )
    result = (*(v4 + 220))("mac", v8, 8);
  else
    result = (*(v4 + 224))("mac", v8, 8);
  return result;
}
----------------------------------------------------------------------
ACJoinResponsePacket

int __thiscall ACJoinResponsePacket_Structure(_DWORD *this, int a2)
{
  _DWORD *v2; // esi
  int v4; // [esp+0h] [ebp-8h]
  int v5; // [esp+4h] [ebp-4h]

  v2 = this;
  (*(*a2 + 68))("authId", this + 2, 0, v4);
  if ( (*(*a2 + 28))() )
  {
    (*(*a2 + 64))("reason", &v5);
    v2[3] = v5;
  }
  else
  {
    v5 = *(v2 + 6);
    (*(*a2 + 64))("reason", &v5);
  }
  return (*(*a2 + 56))("afs", v2 + 4, 0);
}
----------------------------------------------------------------------
ACChallengePacket

int __thiscall ACChallengePacket_Structure(char *this, int a2)
{
  char *v2; // esi
  int v3; // esi
  signed int v4; // edi
  int result; // eax

  v2 = this;
  (*(*a2 + 60))("salt", this + 8, 0);
  v3 = (v2 + 12);
  v4 = 4;
  do
  {
    result = (*(*a2 + 60))(&aCh, v3, 0);
    v3 += 4;
    --v4;
  }
  while ( v4 );
  return result;
}
----------------------------------------------------------------------
ACAuthResponsePacket

int __thiscall ACAuthResponsePacket_Structure(void *this, int a2)
{
  int v2; // edi
  int v3; // eax

  v2 = this;
  (*(*a2 + 56))("accountId", this + 8, 0);
  if ( (*(*a2 + 28))() )
  {
    *((*(*a2 + 220))("wsk", v2 + 16, 32) + v2 + 16) = 0;
  }
  else
  {
    v3 = XlStringSize((v2 + 16));
    (*(*a2 + 224))("wsk", v2 + 16, v3);
  }
  return (*(*a2 + 68))("slotCount", v2 + 49, 0);
}
----------------------------------------------------------------------
ACChallenge2Packet

int __thiscall ACChallenge2Packet_Structure(char *this, int a2)
{
  char *v2; // edi
  int v3; // eax
  int v4; // esi
  signed int v5; // edi
  int result; // eax

  v2 = this;
  (*(*a2 + 76))("round", this + 8, 0);
  if ( (*(*a2 + 28))() )
  {
    v2[(*(*a2 + 220))("salt", v2 + 12, 16) + 12] = 0;
  }
  else
  {
    v3 = XlStringSize(v2 + 12);
    (*(*a2 + 224))("salt", v2 + 12, v3);
  }
  v4 = (v2 + 32);
  v5 = 8;
  do
  {
    result = (*(*a2 + 60))(&aCh, v4, 0);
    v4 += 4;
    --v5;
  }
  while ( v5 );
  return result;
}
----------------------------------------------------------------------
ACEnterOtpPacket

int __thiscall ACEnterOtpPacket_Structure(void *this, int a2)
{
  int v2; // esi

  v2 = this;
  (*(*a2 + 76))("mt", this + 8, 0);
  return (*(*a2 + 76))("ct", v2 + 12, 0);
}
----------------------------------------------------------------------
ACShowArsPacket

int __thiscall ACShowArsPacket_Structure(char *this, int a2)
{
  char *v2; // edi
  int v3; // esi
  int v4; // eax

  v2 = this;
  v3 = (this + 8);
  if ( (*(*a2 + 28))() )
  {
    *((*(*a2 + 220))("num", v2 + 8, 8) + v3) = 0;
  }
  else
  {
    v4 = XlStringSize(v2 + 8);
    (*(*a2 + 224))("num", v2 + 8, v4);
  }
  return (*(*a2 + 60))("timeout", v2 + 20, 0);
}
----------------------------------------------------------------------
ACEnterPcCertPacket

int __thiscall ACEnterPcCertPacket_Structure(void *this, int a2)
{
  int v2; // esi

  v2 = this;
  (*(*a2 + 76))("mt", this + 8, 0);
  return (*(*a2 + 76))("ct", v2 + 12, 0);
}
----------------------------------------------------------------------
ACWorldListPacket

int *__thiscall ACWorldListPacket_Structure(char *this, int a2)
{
  char *v2; // esi
  unsigned int v3; // ebx
  int i; // edi
  unsigned int v5; // eax
  bool v6; // cf
  bool v7; // zf
  int *v8; // eax
  unsigned __int8 *v9; // ebx
  unsigned int v10; // edi
  int j; // esi
  unsigned int v12; // eax
  int *result; // eax
  unsigned int v14; // [esp+Ch] [ebp-4h]

  v2 = this;
  (*(*a2 + 68))("count", this + 8, 0);
  v3 = 0;
  for ( i = (v2 + 12); ; i += 184 )
  {
    v5 = v2[8];
    v14 = v5;
    v6 = v5 < 0xFA;
    v7 = v5 == 250;
    v8 = "ъ";
    if ( v6 || v7 )
      v8 = &v14;
    if ( v3 >= *v8 )
      break;
    sub_3955D370(a2);
    ++v3;
  }
  v9 = (v2 + 46012);
  (*(*a2 + 68))("chCount", v2 + 46012, 0);
  v10 = 0;
  for ( j = (v2 + 46016); ; j += 184 )
  {
    v12 = *v9;
    v14 = v12;
    v6 = v12 < 0xFF;
    v7 = v12 == 255;
    result = "я";
    if ( v6 || v7 )
      result = &v14;
    if ( v10 >= *result )
      break;
    sub_39794850(a2);
    ++v10;
  }
  return result;
}
----------------------------------------------------------------------
ACWorldQueuePacket

int __thiscall ACWorldQueuePacket_Structure(void *this, int a2)
{
  int v2; // esi

  v2 = this;
  (*(*a2 + 68))("wid", this + 8, 0);
  (*(*a2 + 68))("userGrade", v2 + 9, 0);
  (*(*a2 + 64))("myTurn", v2 + 10, 0);
  (*(*a2 + 64))("normalLength", v2 + 12, 0);
  return (*(*a2 + 64))("premiumLength", v2 + 14, 0);
}
----------------------------------------------------------------------
ACWorldCookiePacket

int __thiscall ACWorldCookiePacket_Structure(char *this, int a2)
{
  char *v2; // esi
  int v3; // edi
  int v4; // esi
  signed int v5; // ebx
  int result; // eax

  v2 = this;
  (*(*a2 + 76))("cookie", this + 8, 0);
  v3 = (v2 + 28);
  v4 = (v2 + 12);
  v5 = 4;
  do
  {
    (*(*a2 + 60))("ip", v4, 0);
    result = (*(*a2 + 64))("port", v3, 0);
    v4 += 4;
    v3 += 2;
    --v5;
  }
  while ( v5 );
  return result;
}
----------------------------------------------------------------------
ACEnterWorldDeniedPacket

int __thiscall ACEnterWorldDeniedPacket_Structure(void *this, int a2)
{
  void *v2; // esi
  int result; // eax
  int v4; // [esp+0h] [ebp-8h]
  unsigned __int8 v5; // [esp+7h] [ebp-1h]

  v2 = this;
  if ( (*(*a2 + 28))(v4) )
  {
    result = (*(*a2 + 68))("reason", &v5);
    *(v2 + 2) = v5;
  }
  else
  {
    v5 = *(v2 + 8);
    result = (*(*a2 + 68))("reason", &v5);
  }
  return result;
}
----------------------------------------------------------------------
ACLoginDeniedPacket

int __thiscall ACLoginDeniedPacket_Structure(char *this, int a2)
{
  char *v2; // esi
  const char *v3; // esi
  int v4; // eax
  int result; // eax
  int v6; // [esp+0h] [ebp-8h]
  unsigned __int8 v7; // [esp+7h] [ebp-1h]

  v2 = this;
  if ( (*(*a2 + 28))(v6) )
  {
    (*(*a2 + 68))("reason", &v7);
    *(v2 + 2) = v7;
  }
  else
  {
    v7 = v2[8];
    (*(*a2 + 68))("reason", &v7);
  }
  Set_vp(a2);
  v3 = v2 + 1040;
  if ( (*(*a2 + 28))(0) )
  {
    result = (*(*a2 + 220))("msg", v3, 2048);
    v3[result] = 0;
  }
  else
  {
    v4 = XlStringSize(v3);
    result = (*(*a2 + 224))("msg", v3, v4);
  }
  return result;
}
----------------------------------------------------------------------
ACAccountWarnedPacket

int __thiscall ACAccountWarnedPacket_Structure(char *this, int a2)
{
  char *v2; // esi
  const char *v3; // esi
  int v4; // eax
  int result; // eax
  int v6; // [esp+0h] [ebp-8h]
  unsigned __int8 v7; // [esp+7h] [ebp-1h]

  v2 = this;
  if ( (*(*a2 + 28))(v6) )
  {
    (*(*a2 + 68))("source", &v7);
    *(v2 + 2) = v7;
  }
  else
  {
    v7 = v2[8];
    (*(*a2 + 68))("source", &v7);
  }
  v3 = v2 + 12;
  if ( (*(*a2 + 28))(0) )
  {
    result = (*(*a2 + 220))("msg", v3, 2048);
    v3[result] = 0;
  }
  else
  {
    v4 = XlStringSize(v3);
    result = (*(*a2 + 224))("msg", v3, v4);
  }
  return result;
}